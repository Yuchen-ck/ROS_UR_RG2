// Generated by gencpp from file pick_place_msgs/PickStepRequest.msg
// DO NOT EDIT!


#ifndef PICK_PLACE_MSGS_MESSAGE_PICKSTEPREQUEST_H
#define PICK_PLACE_MSGS_MESSAGE_PICKSTEPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pick_place_msgs
{
template <class ContainerAllocator>
struct PickStepRequest_
{
  typedef PickStepRequest_<ContainerAllocator> Type;

  PickStepRequest_()
    : step_name()  {
    }
  PickStepRequest_(const ContainerAllocator& _alloc)
    : step_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _step_name_type;
  _step_name_type step_name;





  typedef boost::shared_ptr< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PickStepRequest_

typedef ::pick_place_msgs::PickStepRequest_<std::allocator<void> > PickStepRequest;

typedef boost::shared_ptr< ::pick_place_msgs::PickStepRequest > PickStepRequestPtr;
typedef boost::shared_ptr< ::pick_place_msgs::PickStepRequest const> PickStepRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pick_place_msgs::PickStepRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pick_place_msgs::PickStepRequest_<ContainerAllocator1> & lhs, const ::pick_place_msgs::PickStepRequest_<ContainerAllocator2> & rhs)
{
  return lhs.step_name == rhs.step_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pick_place_msgs::PickStepRequest_<ContainerAllocator1> & lhs, const ::pick_place_msgs::PickStepRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pick_place_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7df732581805a5790d1b67c0571ede49";
  }

  static const char* value(const ::pick_place_msgs::PickStepRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7df732581805a579ULL;
  static const uint64_t static_value2 = 0x0d1b67c0571ede49ULL;
};

template<class ContainerAllocator>
struct DataType< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pick_place_msgs/PickStepRequest";
  }

  static const char* value(const ::pick_place_msgs::PickStepRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# -------- Request --------\n"
"string step_name\n"
;
  }

  static const char* value(const ::pick_place_msgs::PickStepRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PickStepRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pick_place_msgs::PickStepRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pick_place_msgs::PickStepRequest_<ContainerAllocator>& v)
  {
    s << indent << "step_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.step_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICK_PLACE_MSGS_MESSAGE_PICKSTEPREQUEST_H
